# Golden Age Hospital Management System
# Set up class structure
import random
import string

# Utility function to generate unique IDs
def generate_id(prefix):
    return prefix + ''.join(random.choices(string.digits, k=4))

# Define the base Person class
class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

    def display(self):
        return f"Name: {self.name}, Age: {self.age}, Gender: {self.gender}"

# Define the Patient class
class Patient(Person):
    def __init__(self, name, age, gender):
        super().__init__(name, age, gender)
        self.patient_id = generate_id("P")
        self.appointments = []

    def view_profile(self):
        return f"Patient ID: {self.patient_id}, {self.display()}"

# Define the Doctor class
class Doctor(Person):
    def __init__(self, name, age, gender, specialty):
        super().__init__(name, age, gender)
        self.doctor_id = generate_id("D")
        self.specialty = specialty
        self.schedule = []  # list of available time slots

    def view_schedule(self):
        return f"Doctor ID: {self.doctor_id}, Specialty: {self.specialty}, Schedule: {', '.join(self.schedule)}"

    def is_available(self, time_slot):
        return time_slot in self.schedule

# Define the Appointment class
class Appointment:
    def __init__(self, patient, doctor, date, time):
        self.appointment_id = generate_id("A")
        self.patient = patient
        self.doctor = doctor
        self.date = date
        self.time = time
        self.status = "Confirmed"

    def confirm(self):
        return f"Appointment {self.appointment_id} confirmed for {self.patient.name} with Dr. {self.doctor.name} on {self.date} at {self.time}."

    def cancel(self):
        self.status = "Cancelled"
        return f"Appointment {self.appointment_id} cancelled."

# Define the HospitalSystem class
class HospitalSystem:
    def __init__(self):
        self.patients = {}
        self.doctors = {}
        self.appointments = []

    def add_patient(self, name, age, gender):
        try:
            age = int(age)
            new_patient = Patient(name, age, gender)
            self.patients[new_patient.patient_id] = new_patient
            return f"Patient registered successfully! {new_patient.view_profile()}"
        except ValueError:
            return "Invalid age input."

    def add_doctor(self, name, age, gender, specialty, schedule):
        try:
            age = int(age)
            new_doctor = Doctor(name, age, gender, specialty)
            new_doctor.schedule = schedule
            self.doctors[new_doctor.doctor_id] = new_doctor
            return f"Doctor added successfully! {new_doctor.view_schedule()}"
        except ValueError:
            return "Invalid age input."

    def book_appointment(self, patient_id, doctor_id, date, time):
        if patient_id not in self.patients:
            return "Patient not found."
        if doctor_id not in self.doctors:
            return "Doctor not found."
        doctor = self.doctors[doctor_id]
        if not doctor.is_available(time):
            return "Doctor not available at that time."
        # Check for existing appointments
        for appt in self.appointments:
            if appt.doctor.doctor_id == doctor_id and appt.date == date and appt.time == time:
                return "This time slot is already booked for the doctor."
        new_appt = Appointment(self.patients[patient_id], doctor, date, time)
        self.patients[patient_id].appointments.append(new_appt)
        self.appointments.append(new_appt)
        return new_appt.confirm()

    def cancel_appointment(self, appointment_id):
        for appt in self.appointments:
            if appt.appointment_id == appointment_id:
                return appt.cancel()
        return "Appointment ID not found."

    def generate_bill(self, appointment_id, additional_fee):
        try:
            # Loop through the appointments list to find the appointment by ID
            appointment = None
            for appt in self.appointments:
                if appt.appointment_id == appointment_id:
                    appointment = appt
                    break

            if not appointment:
                print("Appointment not found.")
                return

            consultation_fee = 3000
            total = consultation_fee + float(additional_fee)

            print("\n=== Receipt ===")
            print("Golden Age Hospital")
            print(f"Appointment ID: {appointment_id}")
            print(f"Patient Name: {appointment.patient.name}")
            print(f"Doctor: Dr. {appointment.doctor.name} ({appointment.doctor.specialty})")
            print(f"Date: {appointment.date} | Time: {appointment.time}")
            print(f"Consultation Fee: JMD$ {consultation_fee}")
            print(f"Additional Charges: JMD$ {additional_fee}")
            print(f"Total: JMD$ {total:.2f}")
            print("====================\n")

        except Exception as e:
            print("An error occurred while trying to generating the bill:", e)

    def view_appointments(self):
        if not self.appointments:
            print("No appointments scheduled.")
            return

        print("\n=== Scheduled Appointments ===")
        for appt in self.appointments:
            print(f"ID: {appt.appointment_id} | Patient: {appt.patient.name} | "
                  f"Doctor: Dr. {appt.doctor.name} | Date: {appt.date} | Time: {appt.time} | Status: {appt.status}")
        print("================================")

def display_menu():
    print("\n=== Welcome to the Golden Age Hospital ===")
    print("1. Register New Patient")
    print("2. Add New Doctor")
    print("3. Book Appointment")
    print("4. Cancel Appointment")
    print("5. View Appointments")
    print("6. Generate Bill")
    print("7. Exit")

# Create a HospitalSystem instance
hospital_system = HospitalSystem()

def view_appointments(self):
    if not self.appointments:
        print("No appointments scheduled.")
        return

    print("\n=== Scheduled Appointments ===")
    for appt in self.appointments:
        print(f"ID: {appt.appointment_id} | Patient: {appt.patient.name} | "
              f"Doctor: Dr. {appt.doctor.name} | Date: {appt.date} | Time: {appt.time} | Status: {appt.status}")
    print("==============================\n")
    
while True:
    display_menu()
    user_choice = input("Enter your choice (1â€“7): ")

    if user_choice == "1":
        patient_name = input("Enter patient name: ")
        patient_age = input("Enter patient age: ")
        patient_gender = input("Enter patient gender: ")
        print(hospital_system.add_patient(patient_name, patient_age, patient_gender))

    elif user_choice == "2":
        doctor_name = input("Enter doctor name: ")
        doctor_age = input("Enter doctor age: ")
        doctor_gender = input("Enter doctor gender: ")
        doctor_specialty = input("Enter specialty: ")
        doctor_schedule = input("Enter available time slots (comma-separated): ").split(",")
        print(hospital_system.add_doctor(doctor_name, doctor_age, doctor_gender, doctor_specialty, doctor_schedule))

    elif user_choice == "3":
        appt_patient_id = input("Enter patient ID: ")
        appt_doctor_id = input("Enter doctor ID: ")
        appt_date = input("Enter appointment date (YYYY-MM-DD): ")
        appt_time = input("Enter appointment time (e.g., 10:00 AM): ")
        print(hospital_system.book_appointment(appt_patient_id, appt_doctor_id, appt_date, appt_time))

    elif user_choice == "4":
        cancel_appointment_id = input("Enter appointment ID to cancel: ")
        print(hospital_system.cancel_appointment(cancel_appointment_id))

    elif user_choice == "5":
        hospital_system.view_appointments()

    elif user_choice == "6":
        billing_appt_id = input("Enter appointment ID for billing: ")
        billing_additional_fee = input("Enter additional service fee (or leave blank for 0): ")
        billing_additional_fee = float(billing_additional_fee) if billing_additional_fee else 0
        hospital_system.generate_bill(billing_appt_id, billing_additional_fee)

    elif user_choice == "7":
        print("Thank you for using the Golden Age Hospital Management System. Have a great day. Goodbye!")
        break

    else:
        print("Invalid choice. Please select a valid option.")
